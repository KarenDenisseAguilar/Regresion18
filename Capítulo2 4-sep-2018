###############################UAEM###################################
############ANALISIS DE REGRESION#####################################
############DR. EN E.P. SERGIO CUAUHTEMOC GAXIOLA ROBLES LINARES######
############GUADALUPE SALINAS CASTRO##################################
############KAREN JAZMIN ROLDAN PASTRANA##############################
############KAREN DENISSE AGUILAR SERRANO#############################
############ALFREDO VILLAGRAN GARCIA##################################

install.packages("ggplot2")
library("ggplot2")
diamonds

set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
dsmall
qplot(carat, price, data = diamonds)#The plot shows a strong correlation with notable 
#outliers and some interesting vertical striation.
#The relationship looks exponential, though, so the first
#thing we’d like to do is to transform the variables
qplot(log(carat), log(price), data = diamonds)
#The relationship now looks linear. With this much overplotting,
qplot(carat, x * y * z, data = diamonds)
# the relationship between the volume of the diamond (approximated
#by x × y × z) and its weight
#We would expect the density (weight/volume) of diamonds to be constant,
##and so see a linear relationship between volume and weight
qplot(carat,price, data=dsmall, colour=color)
qplot(carat,price, data=dsmall, shape= cut)
##colour=I("red")
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
#Reducing the alpha value from 1/10 (left) to 1/100 (middle) to 1/200 (right)
#makes it possible to see where the bulk of the points lie.      


###Geom  : describes the type     of object that is used to display the data.       
##geom = "point" draws points to produce a scatterplot. This is the default
#when you supply both x and y arguments to qplot().
##geom = "smooth" se adapta a los datos con más suavidad y muestra el error estándar y la suavidad 
##geom = "boxplot" produces a box-and-whisker plot to summarise the
#distribution of a set of points
##geom = "path" and geom = "line" draw lines between the data points.
#Traditionally these are used to explore relationships between time and
#another variable
#For continuous variables, geom = "histogram" draws a histogram, geom =
#"freqpoly" a frequency polygon, and geom = "density" creates a density plot
#For discrete variables, geom = "bar" makes a bar chart
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))

#method = "loess", el valor predeterminado para n pequeño, usa una regresión local uniforme.


qplot(carat, price, data = dsmall, geom = c("point", "smooth"), span = 0.2)
qplot(carat, price, data = dsmall, geom = c("point", "smooth"), span = 1)

library(mgcv)
qplot(carat, price, data = dsmall, geom = c("point", "smooth"), method = "gam", formula = y~s(x))

qplot(carat, price, data=dsmall, geom = c("point", "smooth"), method="gam", formula = y~s(x, bs="cs"))
#use the formula y ~ s(x, bs = "cs"). This is used by
#default when there are more than 1,000 points.

#method = "lm" fits a linear model

library(splines)

qplot(carat, price, data=dsmall, geom = c("point", "smooth"),method="lm")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),method = "lm", formula = y ~ ns(x,5))
#formula=y~ ns(x, 2) is the degrees
#of freedom: a higher number will create a wigglier curve

library(MASS)
#method = "rlm" works like lm, but uses a robust fitting algorithm so that
#outliers don’t affect the fit as much.
qplot(carat, price, data=dsmall, geom = c("point", "smooth"),method="rlm")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),method = "rlm", formula = y ~ ns(x,5))


#the distribution of price per carat varies with the colour of the diamond
#using jittering (geom = "jitter", left) and box-and-whisker plots (geom = "boxplot", right).

qplot(color, price / carat, data = diamonds, geom = "jitter", alpha = I(1 / 5))
qplot(color, price / carat, data = diamonds, geom = "jitter", alpha = I(1 / 50))
qplot(color, price / carat, data = diamonds, geom = "jitter", alpha = I(1 / 200))

#For jittered points, qplot offers the same control over aesthetics as it
#does for a normal scatterplot: size, colour and shape. For boxplots you can
#control the outline colour, the internal fill colour and the size of the lines

qplot(carat, data = diamonds, geom = "histogram")
qplot(carat, data = diamonds, geom = "density")

#Displaying the distribution of diamonds. (Left) geom = "histogram" and (right) geom = "density".

qplot(carat, data = diamonds, geom = "histogram", binwidth = 1, xlim = c(0,3))
#). For the histogram, the binwidth argument controls the amount of smoothing by setting the bin size
qplot(carat, data = diamonds, geom = "histogram", binwidth = .1, xlim = c(0,3))

qplot(carat, data = diamonds, geom = "histogram", binwidth = .01, xlim = c(0,3))

qplot(carat, data = diamonds, geom = "density", colour= color)

qplot(carat, data = diamonds, geom = "histogram" , fill = color)


#The discrete analogue of histogram is the bar chart, geom = "bar". The bar
#geom counts the number of instances of each class

qplot(color, data = diamonds, geom = "bar")
qplot(color, data = diamonds, geom = "bar", weight = carat)+ scale_y_continuous("carat")
#The 1° plot shows counts and the 2° plot is weighted by weight = carat to show the total weight of diamonds of each colour.


##Path plots show how two variables have simultaneously changed over time, with time encoded in the way that the points are joined together.

qplot(date, unemploy / pop, data= economics, geo = "line")
qplot(date, uempmed, data = economics, geom = "line")

year<- function(x) as.POSIXlt(x)$year + 1990
qplot(unemploy / pop, uempmed, data = economics, geom = c("point", "path"))
#plot unemployment rate vs. length of unemployment and join the
#individual observations with a path

#########qplot(unemploy / pop, uempmed, data = economics, geom = "path", colour = year(date))+ scale_area()

qplot(carat, data = diamonds, facets = color~., geom = "histogram", binwidth = 0.1, xlim = c(0,3))
qplot(carat, ..density.., data = diamonds, facets = color~., geom= "histogram", binwidth = 0.1, xlim = c(0,3))
#Using ..density.. tells ggplot2 to map the density to the y-axis
#instead of the default use of count
#The y-axis of the histogram does not come from the original data, but
#from the statistical transformation that counts the number of observations in each bin

#qplot(
 # +  carat , price, data = dsmall,
  #+ xlab = "Price ($)", ylab = "Weigth (carats", 
  #+ main = "Price-weigth relationship"
  #+ )

#qplot(
  #+carat, price/carat, data = dsmall,
  #+ ylab = expression(frac(price, carat)),
  #+ xlab= "Weigth (carats)",
  #+ main = "Small diamonds", 
  #+ xlim=c(.2,1)
  #+ )

qplot(carat, price, data = dsmall, log = "xy")
